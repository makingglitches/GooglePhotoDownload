
"""

class Photo:
    """
    accesses the google photos api using the google auth library and the requests library.
    """
    def __init__(self,client_secret_file="client_secrets.json"):
        """
        initializes the google photos api class and generates the credentials needed to make requests to the api.
        """
        self.creds = self.get_creds(client_secret_file)
    
    @staticmethod
    def get_creds(client_secret_file):
        """
        returns the credentials needed to make requests to the google photos api.
        """
        if os.path.isfile("token.pickle"):
            with open("token.pickle","rb") as token:
                creds = pickle.load(token)
        
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(client_secret_file, \
                    scopes=['https://www.googleapis.com/auth/photoslibrary.readonly', \
                        'https://www.googleapis.com/auth/userinfo.profile', \
                        'https://www.googleapis.com/auth/userinfo.email', \
                        'openid'])
                
                creds = flow.run_local_server(port=8028,open_browser=False, success_message="<b>CLOSE THE BROWSER NOW YOU BASTARD</B>")
                
            with open("token.pickle","wb") as token:
                pickle.dump(creds,token)
                
        return creds
        
    def get_media_items(self,page_size=10,page_token=None):
        """
        returns a page of media items from the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/mediaItems"
        params = {
            "pageSize": page_size,
        }
        if page_token:
            params.update({"pageToken":page_token})
            
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers, params=params)
        
        return response.json()
        
    def get_media_item(self,media_item_id):
        """
        returns a media item from the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/mediaItems/{media_item_id}"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers)
        
        return response.json()
        
    def get_shared_albums(self,page_size=10,page_token=None):
        """
        returns a page of shared albums from the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/sharedAlbums"
        params = {
            "pageSize": page_size,
        }
        if page_token:
            params.update({"pageToken":page_token})
            
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers, params=params)
        
        return response.json()
        
    def get_shared_album(self,shared_album_id):
        """
        returns a shared album from the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums/{shared_album_id}"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers)
        
        return response.json()
        
    def get_shared_album_items(self,shared_album_id,page_size=10,page_token=None):
        """
        returns a page of media items from the google photos api from a shared album.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums/{shared_album_id}/mediaItems"
        params = {
            "pageSize": page_size,
        }
        if page_token:
            params.update({"pageToken":page_token})
            
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers, params=params)
        
        return response.json()
        
    def search(self,filters,page_size=10,page_token=None):
        """
        returns a page of media items from the google photos api based on search criteria.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/mediaItems:search"
        params = {
            "pageSize": page_size,
        }
        if page_token:
            params.update({"pageToken":page_token})
            
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers, params=params, json=filters)
        
        return response.json()
        
    def add_media_items(self,album_id,media_items):
        """
        adds media items to an album in the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/albums/{album_id}:batchAddMediaItems"
        params = {
            "album_id": album_id,
        }
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers, params=params, json=media_items)
        
        return response.json()
        
    def create_album(self,album_title,album_description=None,album_location=None,cover_photo_id=None):
        """
        creates an album in the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/albums"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        data = {
            "album": {
                "title": album_title,
            }
        }
        if album_description:
            data["album"].update({"album_description":album_description})
        if album_location:
            data["album"].update({"album_location":album_location})
        if cover_photo_id:
            data["album"].update({"cover_photo_id":cover_photo_id})
            
        response = requests.post(endpoint,headers=headers, json=data)
        
        return response.json()
        
    def add_enrichment(self,media_item_id,album_id,new_media_item_id=None):
        """
        adds an enrichment to a media item in the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/mediaItems/{media_item_id}:batchAddEnrichment"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        data = {
            "newEnrichmentItem": {
                "albumPosition": {
                    "relativeEnrichmentItemId": media_item_id,
                    "relativePosition": "AFTER_DESCENDANTS",
                },
                "locationEnrichment": {
                    "location": {
                        "latlng": {
                            "latitude": 0.0,
                            "longitude": 0.0,
                        }
                    },
                },
                "textEnrichment": {
                    "text": "sample text",
                },
            }
        }
        if new_media_item_id:
            data["newEnrichmentItem"].update({"newMediaItem":new_media_item_id})
            
        response = requests.post(endpoint,headers=headers, json=data)
        
        return response.json()
        
    def join_shared_album(self,shared_album_id):
        """
        joins a shared album in the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums/{shared_album_id}:join"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers)
        
        return response.json()
        
    def leave_shared_album(self,shared_album_id):
        """
        leaves a shared album in the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums/{shared_album_id}:leave"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers)
        
        return response.json()
        
    def share_album(self,album_id,shared_album_options=None):
        """
        shares an album in the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}:share"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        data = {
            "sharedAlbumOptions": {
                "isCollaborative": True,
                "isCommentable": True,
            }
        }
        if shared_album_options:
            data.update(shared_album_options)
            
        response = requests.post(endpoint,headers=headers, json=data)
        
        return response.json()
        
    def list_shared_albums(self,page_size=10,page_token=None):
        """
        returns a list of shared albums from the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/sharedAlbums"
        params = {
            "pageSize": page_size,
        }
        if page_token:
            params.update({"pageToken":page_token})
            
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers, params=params)
        
        return response.json()
        
    def unshare_album(self,shared_album_id):
        """
        unshares a shared album in the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums/{shared_album_id}:unshare"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers)
        
        return response.json()
        
    def list_shared_album_contents(self,shared_album_id,page_size=10,page_token=None):
        """
        returns a list of contents from a shared album in the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums/{shared_album_id}/mediaItems"
        params = {
            "pageSize": page_size,
        }
        if page_token:
            params.update({"pageToken":page_token})
            
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers, params=params)
        
        return response.json()
        
    def list_album_contents(self,album_id,page_size=10,page_token=None):
        """
        returns a list of contents from an album in the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}/mediaItems"
        params = {
            "pageSize": page_size,
        }
        if page_token:
            params.update({"pageToken":page_token})
            
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers, params=params)
        
        return response.json()
        
    def list_albums(self,page_size=10,page_token=None):
        """
        returns a list of albums from the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/albums"
        params = {
            "pageSize": page_size,
        }
        if page_token:
            params.update({"pageToken":page_token})
            
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.get(endpoint,headers=headers, params=params)
        
        return response.json()
        
    def batch_create_media_items(self,new_media_items):
        """
        adds multiple media items to the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/mediaItems:batchCreate"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers, json=new_media_items)
        
        return response.json()
        
    def batch_get_media_items(self,media_item_ids):
        """
        returns a list of media items from the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/mediaItems:batchGet"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers, json=media_item_ids)
        
        return response.json()
        
    def batch_get_shared_albums(self,shared_album_ids):
        """
        returns a list of shared albums from the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/sharedAlbums:batchGet"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers, json=shared_album_ids)
        
        return response.json()
        
    def get_media_item_download_url(self,media_item_id):
        """
        returns a url to download a media item from the google photos api.
        """
        endpoint = f"https://photoslibrary.googleapis.com/v1/mediaItems/{media_item_id}:getDownloadUrl"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers)
        
        return response.json()
        
    def batch_remove_media_items(self,media_item_ids):
        """
        removes media items from the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1/mediaItems:batchRemove"
        headers = {
            'Authorization': 'Bearer '+ self.creds.token,
        }
        response = requests.post(endpoint,headers=headers, json=media_item_ids)
        
        return response.json()
        
    def batch_remove_shared_albums(self,shared_album_ids):
        """
        removes shared albums from the google photos api.
        """
        endpoint = "https://photoslibrary.googleapis.com/v1