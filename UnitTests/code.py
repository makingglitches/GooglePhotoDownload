
# this was generated by the testopai.py.
# using the contents of prompt.txt in this directory.
# its the result of tinkering with chatgpt until it created code that started off as acceptable enough.
# though attempting it to read further into things didn't work so well.
# this code likely contains logic errors.
import requests
import google.auth
import pickle
import os

from google_auth_oauthlib.flow import InstalledAppFlow


class PhotosLibrary:
    def __init__(self, client_secrets_json_path):
        self.client_secrets_json_path = client_secrets_json_path
        self.__credentials = None
        self.__access_token = None
        self.__refresh_token = None
        self.__token_expiration = None
        self.__token_pickle_path = 'photos_token.pickle'

    def __get_credentials(self):
        if not os.path.exists(self.__token_pickle_path):
            print('No token pickle file found')
            return self.__authenticate()

        with open(self.__token_pickle_path, 'rb') as token:
            self.__credentials = pickle.load(token)
            print('Token loaded from pickle')

        return self.__credentials

    def __authenticate(self):
        flow = InstalledAppFlow.from_client_secrets_file(self.client_secrets_json_path, \
        scopes=['https://www.googleapis.com/auth/photoslibrary.readonly', \
        'https://www.googleapis.com/auth/userinfo.profile', \
        'https://www.googleapis.com/auth/userinfo.email', \
        'openid'])
            
        self.__credentials = flow.run_local_server(port=8028,open_browser=False, success_message="<b>CLOSE THE BROWSER NOW YOU BASTARD</B>")
        print('New token created')

        with open(self.__token_pickle_path, 'wb') as token:
            pickle.dump(self.__credentials, token)
            print('Token pickled')

        return self.__credentials

    def __get_access_token(self):
        credentials = self.__get_credentials()
        if credentials.expired:
            if credentials.refresh_token:
                print('Refreshing token')
                credentials.refresh(google.auth.transport.requests.Request())
                self.__access_token = credentials.token
                self.__refresh_token = credentials.refresh_token
                self.__token_expiration = credentials.expiry
                print('Token refreshed')
                with open(self.__token_pickle_path, 'wb') as token:
                    pickle.dump(credentials, token)
                    print('Token pickled')

            else:
                print('Refresh token not found')
                print('Authentication required')
                self.__authenticate()
        else:
            self.__access_token = credentials.token
            self.__refresh_token = credentials.refresh_token
            self.__token_expiration = credentials.expiry

        return self.__access_token

    def get_media_items(self, page_size=10, page_token=None):
        endpoint = "https://photoslibrary.googleapis.com/v1/mediaItems"
        params = {
            "pageSize": page_size,
            "pageToken": page_token
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.get(endpoint,headers=headers, params=params)
        return response.json()

    def get_media_item(self, media_item_id):
        endpoint = f"https://photoslibrary.googleapis.com/v1/mediaItems/{media_item_id}"
        params = {}
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.get(endpoint,headers=headers, params=params)
        return response.json()

    def get_media_item_by_product_url(self, product_url):
        endpoint = "https://photoslibrary.googleapis.com/v1/mediaItems:search"
        params = {
            "productUrl": product_url
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def get_media_item_by_filter(self, filters):
        endpoint = "https://photoslibrary.googleapis.com/v1/mediaItems:search"
        params = {
            "filters": filters
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def get_media_item_by_album(self, album_id, page_size=10, page_token=None):
        endpoint = f"https://photoslibrary.googleapis.com/v1/mediaItems:search"
        params = {
            "albumId": album_id,
            "pageSize": page_size,
            "pageToken": page_token
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def get_albums(self, page_size=10, page_token=None):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums"
        params = {
            "pageSize": page_size,
            "pageToken": page_token
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.get(endpoint,headers=headers, params=params)
        return response.json()

    def get_album(self, album_id):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}"
        params = {}
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.get(endpoint,headers=headers, params=params)
        return response.json()

    def get_shared_albums(self, page_size=10, page_token=None):
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums"
        params = {
            "pageSize": page_size,
            "pageToken": page_token
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.get(endpoint,headers=headers, params=params)
        return response.json()

    def get_shared_album(self, album_id):
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums/{album_id}"
        params = {}
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.get(endpoint,headers=headers, params=params)
        return response.json()

    def join_shared_album(self, album_id):
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums:join"
        params = {
            "albumId": album_id
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def leave_shared_album(self, album_id):
        endpoint = f"https://photoslibrary.googleapis.com/v1/sharedAlbums:leave"
        params = {
            "albumId": album_id
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def share_album(self, album_id, share_configuration):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}:share"
        params = {
            "shareConfiguration": share_configuration
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def unshare_album(self, album_id):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}:unshare"
        params = {}
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def add_enrichment(self, album_id, new_enrichment_item):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}:addEnrichment"
        params = {
            "newEnrichmentItem": new_enrichment_item
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def batch_create_media_items(self, new_media_items):
        endpoint = f"https://photoslibrary.googleapis.com/v1/mediaItems:batchCreate"
        params = {
            "newMediaItems": new_media_items
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def batch_get_media_items(self, media_item_ids):
        endpoint = f"https://photoslibrary.googleapis.com/v1/mediaItems:batchGet"
        params = {
            "mediaItemIds": media_item_ids
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def create_album(self, album):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums"
        params = {
            "album": album
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def add_media_items_to_album(self, album_id, media_item_ids):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}:batchAddMediaItems"
        params = {
            "mediaItemIds": media_item_ids
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def remove_media_items_from_album(self, album_id, media_item_ids):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}:batchRemoveMediaItems"
        params = {
            "mediaItemIds": media_item_ids
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.post(endpoint,headers=headers, params=params)
        return response.json()

    def update_album(self, album_id, album):
        endpoint = f"https://photoslibrary.googleapis.com/v1/albums/{album_id}"
        params = {
            "album": album
        }
        headers = {
            'Authorization': 'Bearer '+ self.__get_access_token(),
        }
        response = requests.patch(endpoint,headers=headers, params=params)
        return response.json()


p = PhotosLibrary("client_secrets.json")

albums = p.get_albums()

photos = p.get_media_items()

ares = albums['albums']
apho = photos['mediaItems']

albums = p.get_albums(page_size=10, page_token= albums['nextPageToken'])
photos = p.get_media_items(page_token=photos['nextPageToken'])

print("Done.")